{{template "headerpart" .}}
<!-- Left Column -->
<div class="col-sm-4">

	<div class="panel panel-default panel-custom" id="input_panel">
		<div class="panel-heading">
			<h1 class="panel-title"><span class="glyphicon glyphicon-resize-full"></span> Ports </h1>
		</div>
		<div class="panel-body">
			<table class="table">
				<tr>
					<td rowspan=2 width="20%">Form</td>
					<td width="80%"><select class="form-control" id="edit_requirement_source_node"></select></td>
				</tr>
				<tr>
					<td width="80%"><select class="form-control" id="edit_requirement_source_port"></select></td>
				</tr>
				<tr>
					<td rowspan=2>To</td>
					<td><select class="form-control" id="edit_requirement_destination_node"></select></td>
				</tr>
				<tr>
					<td><select class="form-control" id="edit_requirement_destination_port"></select></td>
				</tr>
				<tr>
					<td>Service</td>
					<td><select class="form-control" id="edit_requirement_service"></select></td>
				</tr>
				<tr>
					<td>Access</td>
					<td>
						<select class="form-control" id="edit_requirement_acccessibility">
							<option value="true">
								Allow
							</option>
							<option value="false">
								Deny
							</option>
						</select>
					</td>
				</tr>
			</table>
			<span style="float: right"><button class="btn btn-default" id="edit_add_requirement_btn" type="button"><span class="glyphicon glyphicon-ok"></span> Register</button></span>
		</div>
	</div>
</div><!--/Left Column-->

<!-- Right Column -->
<div class="col-sm-8">
	<div class="panel panel-default panel-custom" id="list_panel">
		<div class="panel-heading">
			<h1 class="panel-title"><span class="glyphicon glyphicon-transfer"></span> Communication Requirements</h1>
		</div>
		<div class="panel-body">
			<div id="list_panel">
				<table class="table table-condensed table-striped" id="requirement_table" style="width:100%;">
					<thead>
						<tr>
							<th>
								No.
							</th>
							<th>
								Source
							</th>
							<th>
								Destination
							</th>
							<th>
								Service
							</th>
							<th>
								Allow/Deny
							</th>
							<th>
								Delete
							</th>
						</tr>
					</thead>
					<tbody class="table table-bordered" id="requirement_table_body"></tbody>
				</table>
			</div>
	</div>
</div><!--/Right Column-->

<script language="javascript">
	(function($) {

		{{template "functions" .}}

		var nodes = null;
		var nodeMap = null;
		var ports = null;
		var portMap = null;
		var services = null;
		var serviceMap = null;
		var requirements = null;

		function loadResources() {
			nodes = getResources('nodes', 'preloads=NodeType').resources;
			nodeMap = buildResouceMapFromResourceArray(nodes);
			nodeMap[0] = {id: 0, name: "Internet"};
			ports = getResources('ports', 'preloads=Node&q[layer]=3').resources;
			portMap = buildResouceMapFromResourceArray(ports);
			portMap[0] = {
				id: 0,
				node_id: 0,
				name: "Internet",
				mac_address: {
				    String: "00:00:00:00:00:00",
				    Valid: true
				},
				ipv4_address: {
				    String: "0.0.0.0",
				    Valid: true
				},
				ipv4_prefix: {
				    Int64: 0,
				    Valid: true
				},
			}
			for (var i = 0; i < ports.length; i = i + 1) {
				var port = ports[i];
				var node = nodeMap[port.node_id];
				if (node.ports == null) {
					node.ports = [];
				}
				node.ports.push(port);
			}
			services = getResources('services', '').resources;
			servicesMap = buildResouceMapFromResourceArray(services);
			requirements = getResources('requirements', '').resources;
		}

		function convertAccessibiliry(accessibility) {
			if (accessibility) {
				return "Allow";
			}
			else {
				return "Deny";
			}
		}

		function getEditRequirementObject() {
			var result = {}
			var validSource = true;
			if ($('#edit_requirement_source').val() == 0) {
				validSource = false;
			}
			var editRequirementSourcePortId = {
				Int64: parseInt($('#edit_requirement_source').val()),
				Valid: validSource
			}
			var validDestination = true;
			if ($('#edit_requirement_destination').val() == 0) {
				validDestination = false;
			}
			var editRequirementDestinationPortId = {
				Int64: parseInt($('#edit_requirement_destination').val()),
				Valid: validDestination
			}
			var editRequirementServiceId = $('#edit_requirement_service').val();
			var editRequirementAccessibility = $('#edit_requirement_acccessibility').val();
			result = {
				source_port_id: editRequirementSourcePortId,
				destination_port_id: editRequirementDestinationPortId,
				service_id: parseInt(editRequirementServiceId),
				accessibility: convertStringToBoolean(editRequirementAccessibility)
			}
			return result;
		}

		function showRequirements() {
			$("#edit_requirement_source").children().remove();
			$("#edit_requirement_destination").children().remove();
			$("#edit_requirement_service").children().remove();
			$("#requirement_table_body").children().remove();
			$("#requirement_table").dataTable();
			$("#requirement_table").dataTable().fnClearTable();

			$("#edit_requirement_source_node").append($('<option>').val(0).text('Internet'));
			$("#edit_requirement_destination_node").append($('<option>').val(0).text('Internet'));
			$("#edit_requirement_source_port").append($('<option>').val(0).text('Internet (0.0.0.0/0)'));
			$("#edit_requirement_destination_port").append($('<option>').val(0).text('Internet (0.0.0.0/0)'));

			for (var i = 0; i < nodes.length; i = i + 1) {
				var node = nodes[i];
				if (node.ports != null) {
					$("#edit_requirement_source_node").append($('<option>').val(node.id).text(node.name));
					$("#edit_requirement_destination_node").append($('<option>').val(node.id).text(node.name));
				}
			}

			for (var i = 0; i < services.length; i = i + 1) {
				service = services[i]
				$("#edit_requirement_service").append($('<option>').val(service.id).text(service.name));
			}

			for (var i = 0; i < requirements.length; i = i + 1) {
				requirement = requirements[i]
				sourcePort = portsMap[requirement.source_port_id.Int64];
				sourceNode = nodesMap[sourcePort.node_id];
				destinationPort = portsMap[requirement.destination_port_id.Int64];
				destinationNode = nodesMap[destinationPort.node_id];
				service = servicesMap[requirement.service_id];
				$("#requirement_table").dataTable().fnAddData([
					i + 1,
					sourceNode.name + " - " + sourcePort.name + " (" + sourcePort.ipv4_address.String + "/" + sourcePort.ipv4_prefix.Int64 + ")",
					destinationNode.name + " - " + destinationPort.name + " (" + destinationPort.ipv4_address.String + "/" + destinationPort.ipv4_prefix.Int64 + ")",
					service.name,
					convertAccessibiliry(requirement.accessibility),
					'<button name="del_requirement_btn" type="button" class="btn btn-default" value="' + requirement.id + '"><span class="glyphicon glyphicon-minus"></span></button>'
				]);
			}
		}

		function onEditRequirementSourceNodeChanged(selector) {
			var editRequirementSourceNodeID = $(selector.currentTarget).val();

			$('#edit_requirement_source_port').children().remove();

			if (editRequirementSourceNodeID == 0) {
				$('#edit_requirement_source_port').append($('<option>').val(0).text('Internet (0.0.0.0/0)'));
			} else {
				var node = nodeMap[editRequirementSourceNodeID];
				var ports = node.ports;
				for (var i = 0; i < ports.length; i = i + 1) {
					var port = portMap[ports[i].id];
					if (port.layer == 3) {
						$('#edit_requirement_source_port').append($('<option>').val(port.id).text(port.name + ' (' + port.ipv4_address.String + '/' + port.ipv4_prefix.Int64 + ')'));
					}
				}
			}
		}

		function onEditRequirementDestinationNodeChanged(selector) {
			var editRequirementDestinationNodeID = $(selector.currentTarget).val();

			$('#edit_requirement_destination_port').children().remove();

			if (editRequirementDestinationNodeID == 0) {
				$('#edit_requirement_destination_port').append($('<option>').val(0).text('Internet (0.0.0.0/0)'));
			} else {
				var node = nodeMap[editRequirementDestinationNodeID];
				var ports = node.ports;
				for (var i = 0; i < ports.length; i = i + 1) {
					var port = portMap[ports[i].id];
					if (port.layer == 3) {
						$('#edit_requirement_destination_port').append($('<option>').val(port.id).text(port.name + ' (' + port.ipv4_address.String + '/' + port.ipv4_prefix.Int64 + ')'));
					}
				}
			}
		}

		$('#edit_requirement_source_node').on('change', function(selector) {
			onEditRequirementSourceNodeChanged(selector);
		});

		$('#edit_requirement_destination_node').on('change', function(selector) {
			onEditRequirementDestinationNodeChanged(selector);
		});

		function onLoad() {
			loadResources();
			showRequirements();
			$('#input_panel').fadeIn(150);
			$('#list_panel').fadeIn(150);
		}

		$('#edit_add_requirement_btn').on('click', function() {
			if (!confirm("Are you sure to register?")) {
				return;
			}

			response = postRequirement(getEditRequirementObject());

			if (response.status == 201) {
				$("html,body").animate({scrollTop:0},'slow');
				$("#information_message").text("The requirement has been registered successfully.")
				$('#alert_info').fadeIn(500).delay(2000).fadeOut(1000);
				$("#edit_panel").children().remove();
				loadRequirements();
				showRequirements();
			} else {
				$("html,body").animate({scrollTop:0},'slow');
				$("#error_message").text($.parseJSON(response.responseText).error)
				$('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
			}
		});

		$('#requirement_table').on('click', 'button[name=del_requirement_btn]', function(selector) {
			if (!confirm("Are you sure to delete?")) {
				return;
			}

			response = deleteRequirement(selector.currentTarget.value);

			if (response.status == 204) {
				$("html,body").animate({scrollTop:0},'slow');
				$("#information_message").text("The requirement has been deleted successfully.")
				$('#alert_info').fadeIn(500).delay(2000).fadeOut(1000);
				$("#edit_panel").children().remove();
				loadRequirements();
				showRequirements();
			} else {
				$("html,body").animate({scrollTop:0},'slow');
				$("#error_message").text($.parseJSON(response.responseText).error)
				$('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
			}
		});

		onLoad();

	})(jQuery);
</script>
{{template "footerpart" .}}
