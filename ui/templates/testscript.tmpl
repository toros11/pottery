{{template "headerpart" .}}

<div class="col-sm-12">
	<div class="panel panel-default panel-custom" id="communication_requirement_panel">
		<div class="panel-heading">
			<h1 class="panel-title">
				<span class="glyphicon glyphicon-wrench"></span> Test Scripts
			</h1>
		</div>
		<div class="panel-body">
			<div class="row">
				<div class="col-xs-9">
					<ul class="nav nav-pills">
						<li class="active">
							<a href="#requirement_tab" data-toggle="tab"> Communication Requirements</a>
						</li>
						<li>
							<a href="#service_tab" data-toggle="tab"> Services</a>
						</li>
						<li>
							<a href="#protocol_tab" data-toggle="tab"> Protocols</a>
						</li>
					</ul>
				</div>
			</div>
			<div class="tab-content clearfix">

				<div class="tab-pane active" id="requirement_tab">
					<div class="row">
						<div class="col-xs-12">
						    &nbsp;
						</div>
					</div>
					<div class="col-sm-4">
						<div class="panel panel-default" id="edit_requirement_panel">
							<div class="panel-heading">
								<h1 class="panel-title"><span class="glyphicon glyphicon-resize-full"></span> Ports </h1>
							</div>
							<div class="panel-body">
								<table class="table">
									<tr>
										<td rowspan=2 width="20%">Form</td>
										<td width="80%"><select class="form-control" id="edit_requirement_source_node"></select></td>
									</tr>
									<tr>
										<td width="80%"><select class="form-control" id="edit_requirement_source_port"></select></td>
									</tr>
									<tr>
										<td rowspan=2>To</td>
										<td><select class="form-control" id="edit_requirement_destination_node"></select></td>
									</tr>
									<tr>
										<td><select class="form-control" id="edit_requirement_destination_port"></select></td>
									</tr>
									<tr>
										<td>Service</td>
										<td><select class="form-control" id="edit_requirement_service"></select></td>
									</tr>
									<tr>
										<td>Access</td>
										<td>
											<select class="form-control" id="edit_requirement_access">
												<option value="true">
													Allow
												</option>
												<option value="false">
													Deny
												</option>
											</select>
										</td>
									</tr>
								</table>
								<span style="float: right"><button class="btn btn-default" id="edit_add_requirement_btn" type="button"><span class="glyphicon glyphicon-ok"></span> Register</button></span>
							</div>
						</div>
					</div>
					<div class="col-sm-8">
						<div class="panel panel-default" id="edit_requirment_list_panel">
							<div class="panel-heading">
								<h1 class="panel-title"><span class="glyphicon glyphicon-transfer"></span> Communication Requirements</h1>
							</div>
							<div class="panel-body">
								<div id="edit_requirment_list_panel">
									<table class="table table-condensed table-striped" id="edit_requirements_table" style="width:100%;">
										<thead>
											<tr>
												<th>&nbsp;</th>
												<th>Source</th>
												<th>Destination</th>
												<th>Service</th>
												<th>Access</th>
											</tr>
										</thead>
										<tbody class="table table-bordered" id="edit_requirements_table_body"></tbody>
									</table>
								</div>
								<span style="float: left"><button class="btn btn-default" id="edit_delete_requirement_btn" type="button"><span class="glyphicon glyphicon-minus"></span> Delete</button></span>
							</div>
						</div>
					</div>
				</div>


				<div class="tab-pane" id="service_tab">
					<div class="row">
						<div class="col-xs-12">
								&nbsp;
						</div>
					</div>

					<div class="panel panel-default" id="edit_service_panel">
						<div class="panel-heading">
							<h1 class="panel-title"><span class="glyphicon glyphicon-transfer"></span> Services</h1>
						</div>
						<div class="panel-body">

							<!-- Left Column -->
							<div class="col-sm-4">
								<!-- Service Information Panel -->
								<div class="panel panel-default" id="services_panel">
									<!-- Service Information Panel Title -->
									<div class="panel-heading">
										<h1 class="panel-title">
											<span class="glyphicon glyphicon-file"></span> Services
										</h1>
									</div><!-- /Service Information Panel Title -->
									<!-- Service Information Panel Body -->
									<div class="panel-body">
										<!-- Service Selection -->
										<div class="input-group text-left">
											<select class="form-control" id="services"></select>
											<span class="input-group-btn">
												<button class="btn btn-default" id="edit_service_btn" type="button">
													<span class="glyphicon glyphicon-edit"></span>
												</button>
												<button class="btn btn-default" id="new_service_btn" type="button">
													<span class="glyphicon glyphicon-plus"></span>
												</button>
												<button class="btn btn-default" id="delete_service_btn" type="button">
													<span class="glyphicon glyphicon-minus"></span>
												</button>
											</span>
										</div><!-- /Service Selection -->
										<br>
										<!-- Service Properties -->
										<table class="table">
											<tr>
												<th width="50%">
													<span class="glyphicon glyphicon-file"></span> Property
												</th>
												<th width="50%">
													<span class="glyphicon glyphicon-pencil"></span> Value
												</th>
											</tr>
											<tr>
												<td>Service Name</td>
												<td>
													<span id="service_name"></span>
												</td>
											</tr>
										</table><!-- /Service Properties -->
										<!-- Service Connection Panel -->
										<div class="panel panel-default">
											<div class="panel-heading">
												<h1 class="panel-title">
													<span class="glyphicon glyphicon-list-alt"></span> Connections
												</h1>
											</div>
											<div class="panel-body">
												<div class="pre-scrollable" id="connections"></div>
											</div>
										</div><!-- /Service Connection Panel -->
									</div><!-- /Service Information Panel Body -->
								</div><!-- /Service Information Panel -->
							</div><!--/Left Column-->
							<!-- Right Column -->
							<div class="col-sm-8">
								<!-- Service Edit Panel -->
								<div class="panel panel-default panel-custom" id="edit_service_panel_right">
									<!-- Edit-Service Panel -->
									<div class="panel-heading">
										<h3 class="panel-title">
											<span class="glyphicon glyphicon-edit"></span>
											<span id="register_or_update_service_panel_title"></span>
										</h3>
									</div>
									<div class="panel-body">
										<table class="table">
											<tr>
												<th width="15%">
													<span class="glyphicon glyphicon-file"></span> Property
												</th>
												<th width="85%">
													<span class="glyphicon glyphicon-pencil"></span> Value
												</th>
											</tr>
											<tr>
												<td width="15%">Name</td>
												<td width="85%">
													<input type="hidden" id="edit_service_id">
													<input id="edit_service_name" type="text" name="edit_service_name" placeholder="service name like ssh, http, https" class="form-control">
												</td>
											</tr>
										</table>
										<!-- Service Connection Panel -->
										<div class="panel panel-default">
											<div class="panel-heading">
												<h1 class="panel-title">
													<span class="glyphicon glyphicon-list-alt"></span> Connections
												</h1>
											</div>
											<div class="panel-body">
												<table class="table table-condensed table-striped" id="edit_connections_table">
													<thead>
														<tr>
															<th>&nbsp;</th>
															<th>Protocol</th>
															<th>Port Number</th>
														</tr>
													</thead>
													<tbody></tbody>
												</table>
											</div>
											<div style="margin-left:10px;margin-bottom:10px;">
												<span class="input-group-btn">
													<button id="edit_delete_connection_btn" type="button" class="btn btn-default">
														<span class="glyphicon glyphicon-minus"></span>
													</button>
													<button id="edit_add_connection_btn" type="button" class="btn btn-default">
														<span class="glyphicon glyphicon-plus"></span>
													</button>
													<button id="register_or_update_service_btn" type="button" class="btn btn-default">
														<span class="glyphicon glyphicon-ok"></span>
													</button>
													<button id="cancel_register_or_update_service_btn" type="button" class="btn btn-default">
														<span class="glyphicon glyphicon-remove"></span>
													</button>
												</span>
											</div>
										</div><!-- /Service Connection Panel -->
									</div>
								</div><!-- /Edit-Service Panel -->
							</div><!--/Right Column-->

						</div>
					</div>

				</div>


				<div class="tab-pane" id="protocol_tab">
					<div class="row">
						<div class="col-xs-12">
						    &nbsp;
						</div>
					</div>

					<div class="panel panel-default" id="edit_protocol_panel">
						<div class="panel-heading">
							<h1 class="panel-title"><span class="glyphicon glyphicon-transfer"></span> Protocols</h1>
						</div>
						<div class="panel-body">
							<table class="table table-condensed table-striped" id="edit_protocols_table">
								<thead>
									<tr>
										<th>&nbsp;</th>
										<th>Name</th>
									</tr>
								</thead>
								<tbody id="edit_protocols_table_body"></tbody>
							</table>
							<div style="margin-left:10px;margin-bottom:10px;">
								<span class="input-group-btn">
									<button id="edit_delete_protocol_btn" type="button" class="btn btn-default">
										<span class="glyphicon glyphicon-minus"></span>
									</button>
									<button id="edit_add_protocol_btn" type="button" class="btn btn-default">
										<span class="glyphicon glyphicon-plus"></span>
									</button>
									<button id="register_or_update_protocol_btn" type="button" class="btn btn-default">
										<span class="glyphicon glyphicon-ok"></span>
									</button>
									<button id="cancel_register_or_update_protocol_btn" type="button" class="btn btn-default">
										<span class="glyphicon glyphicon-remove"></span>
									</button>
								</span>
							</div>
						</div>
					</div>

				</div>

			</div>
		</div>
	</div>
</div>



<script language="javascript">
	(function($) {

		{{template "functions" .}}

		var nodes = null;
		var nodeMap = null;
		var ports = null;
		var portMap = null;
		var protocols = null;
		var protocolMap = null;
		var services = null;
		var serviceMap = null;
		var requirements = null;
		var requirementMap = null;
		var editRequirementsTable = null;
		var editConnectionsTable = null;
		var editProtocolsTable = null;
		var editServiceMode = null;
		var editingService = null;

		function loadResources() {
			nodes = getResources('nodes', 'preloads=NodeType').resources;
			nodeMap = buildResouceMapFromResourceArray(nodes);
			nodeMap[0] = {id: 0, name: "Internet"};
			ports = getResources('ports', 'preloads=Node&q[layer]=3').resources;
			portMap = buildResouceMapFromResourceArray(ports);
			portMap[0] = {
				id: 0,
				node_id: 0,
				name: "Internet",
				mac_address: {
				    String: "00:00:00:00:00:00",
				    Valid: true
				},
				ipv4_address: {
				    String: "0.0.0.0",
				    Valid: true
				},
				ipv4_prefix: {
				    Int64: 0,
				    Valid: true
				},
			}
			for (var i = 0; i < ports.length; i = i + 1) {
				var port = ports[i];
				var node = nodeMap[port.node_id];
				if (node.ports == null) {
					node.ports = [];
				}
				node.ports.push(port);
			}
			protocols = getResources('protocols', '').resources;
			protocolMap = buildResouceMapFromResourceArray(protocols);
			services = getResources('services', 'preloads=Connections,Connections.Protocol').resources;
			serviceMap = buildResouceMapFromResourceArray(services);
			requirements = getResources('requirements', '').resources;
		}

		function convertAccess(access) {
			if (access) {
				return "Allow";
			}
			else {
				return "Deny";
			}
		}

		function createCheckboxElement(name) {
			var checkBox = $('<input>').prop('name', name).prop('style', 'transform:scale(1.5);').prop('type', 'checkbox');
			return checkBox[0];
		}

		function createAlignedCheckboxElement(name) {
			var checkBox = $('<input>').prop('name', name).prop('style', 'transform:scale(1.5);position:relative;top:7px;').prop('type', 'checkbox');
			return checkBox[0];
		}

		function createTextElement(name, style, placeholder, value) {
			var input = $('<input>').prop('name', name).prop('class', 'form-control').prop('type', 'text').prop('style', style).prop('placeholder', placeholder).val(value).attr('value', value)[0];
			return input;
		}

		function createHiddenElement(name, value) {
			var input = $('<input>').prop('name', name).prop('type', 'hidden').val(value).attr('value', value)[0];
			return input;
		}

		function createSelectElement(name, style, options, value) {
			var select =  $('<select>').prop('name', name).prop('class', 'form-control').prop('style', style);
			var editSelectOptionsElement = createSelectOptionsElement(options);
			for (var i = 0; i < editSelectOptionsElement.length; i = i + 1) {
				if ((value == null) && (i == 0)) {
						select.append(editSelectOptionsElement[i].attr('selected', 'selected'));
				} else {
					if (value == editSelectOptionsElement[i].val()) {
						select.append(editSelectOptionsElement[i].attr('selected', 'selected'));
					} else {
						select.append(editSelectOptionsElement[i]);
					}
				}
			}
			return select[0];
		}

		function createSelectOptionsElement(options) {
			var result = [];
			for (var i = 0; i < options.length; i = i + 1) {
				result.push($('<option>').val(options[i].value).text(options[i].text));
			}
			return result;
		}

		function createConnectionProtocolOptionList() {
			var result = [];
			for (var i = 0; i < protocols.length; i = i + 1) {
				var protocol = protocols[i];
				result.push({value: protocol.id, text: protocol.name});
			}
			return result;
		}

		function createRequiermentModelFromPanel() {
			var result = {}
			var validSource = true;
			if ($('#edit_requirement_source_port').val() == 0) {
				validSource = false;
			}
			var editRequirementSourcePortID = {
				Int64: parseInt($('#edit_requirement_source_port').val()),
				Valid: validSource
			}
			var validDestination = true;
			if ($('#edit_requirement_destination_port').val() == 0) {
				validDestination = false;
			}
			var editRequirementDestinationPortID = {
				Int64: parseInt($('#edit_requirement_destination_port').val()),
				Valid: validDestination
			}
			var editRequirementServiceID = $('#edit_requirement_service').val();
			var editRequirementAccess = $('#edit_requirement_access').val();
			result = {
				source_port_id: editRequirementSourcePortID,
				destination_port_id: editRequirementDestinationPortID,
				service_id: parseInt(editRequirementServiceID),
				access: convertStringToBoolean(editRequirementAccess)
			}
			return result;
		}

		function onRequirementModified(result, successCode, successMessage, ignoreSuccess) {
			if (result.status == successCode) {
				if (!ignoreSuccess) {
					$('html,body').animate({
						scrollTop: 0
					}, 'slow');
					$('#information_message').text(successMessage);
					$('#alert_info').fadeIn(500).delay(2000).fadeOut(1000);
					$('#edit_panel').fadeOut(150);
					loadResources();
					showRequirements();
				}
				return true;
			}
			else {
				$('html,body').animate({
					scrollTop: 0
				}, 'slow');
				$('#error_message').text(result.resource.error);
				$('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
				return false;
			}
		}

		function onServiceModified(result, successCode, successMessage, ignoreSuccess) {
			if (result.status == successCode) {
				if (!ignoreSuccess) {
					$('html,body').animate({
						scrollTop: 0
					}, 'slow');
					$('#information_message').text(successMessage);
					$('#alert_info').fadeIn(500).delay(2000).fadeOut(1000);
					$('#edit_service_panel_right').fadeOut(150);
					loadResources();
					showRequirements();
					showServices(true);
				}
				return true;
			}
			else {
				$('html,body').animate({
					scrollTop: 0
				}, 'slow');
				$('#error_message').text(result.resource.error);
				$('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
				return false;
			}
		}

		function onProtocolModified(result, successCode, successMessage, ignoreSuccess) {
			if (result.status == successCode) {
				if (!ignoreSuccess) {
					$('html,body').animate({
						scrollTop: 0
					}, 'slow');
					$('#information_message').text(successMessage);
					$('#alert_info').fadeIn(500).delay(2000).fadeOut(1000);
					$('#edit_service_panel_right').fadeOut(150);
					loadResources();
					showRequirements();
					showServices(true);
				}
				return true;
			}
			else {
				$('html,body').animate({
					scrollTop: 0
				}, 'slow');
				$('#error_message').text(result.resource.error);
				$('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
				return false;
			}
		}

		function showRequirements() {
			$("#edit_requirement_source_node").children().remove();
			$("#edit_requirement_destination_node").children().remove();
			$("#edit_requirement_source_port").children().remove();
			$("#edit_requirement_destination_port").children().remove();
			$("#edit_requirement_service").children().remove();
			$("#edit_requirement_access").val('true');
			editRequirementsTable.fnClearTable();

			$("#edit_requirement_source_node").append($('<option>').val(0).text('Internet'));
			$("#edit_requirement_destination_node").append($('<option>').val(0).text('Internet'));
			$("#edit_requirement_source_port").append($('<option>').val(0).text('Internet (0.0.0.0/0)'));
			$("#edit_requirement_destination_port").append($('<option>').val(0).text('Internet (0.0.0.0/0)'));

			for (var i = 0; i < nodes.length; i = i + 1) {
				var node = nodes[i];
				if (node.ports != null) {
					$("#edit_requirement_source_node").append($('<option>').val(node.id).text(node.name));
					$("#edit_requirement_destination_node").append($('<option>').val(node.id).text(node.name));
				}
			}

			for (var i = 0; i < services.length; i = i + 1) {
				var service = services[i]
				$("#edit_requirement_service").append($('<option>').val(service.id).text(service.name));
			}

			for (var i = 0; i < requirements.length; i = i + 1) {
				var requirement = requirements[i];
				var sourcePort = portMap[requirement.source_port_id.Int64];
				var sourceNode = nodeMap[sourcePort.node_id];
				var destinationPort = portMap[requirement.destination_port_id.Int64];
				var destinationNode = nodeMap[destinationPort.node_id];
				var service = serviceMap[requirement.service_id];
				editRequirementsTable.fnAddData([
					createCheckboxElement('edit_requirement_check').outerHTML + createHiddenElement('edit_requirement_id', requirement.id).outerHTML,
					sourceNode.name + " - " + sourcePort.name + " (" + sourcePort.ipv4_address.String + "/" + sourcePort.ipv4_prefix.Int64 + ")",
					destinationNode.name + " - " + destinationPort.name + " (" + destinationPort.ipv4_address.String + "/" + destinationPort.ipv4_prefix.Int64 + ")",
					service.name,
					convertAccess(requirement.access)
				]);
			}
			editRequirementsTable.fnDraw();
		}

		function showServices(initializeServiceSelection) {
			if (initializeServiceSelection) {
				$("#services").children().remove();
				for (var i = 0; i < services.length; i = i + 1) {
					var service = services[i];
					$("#services").append($('<option>').val(service.id).text(service.name));
				}
			}
			$('#service_name').text('');
			$('#connections').children().remove();

			var service = serviceMap[$('#services').val()];
			if (service != null) {
				$('#service_name').append(service.name);
				for (var i = 0; i < service.connections.length; i = i + 1) {
					var connection = service.connections[i];
					var connectionsTable = $('<div>').append(
						$('<table>').prop('class', 'table table-bordered').append(
							$('<tr>').append(
								$('<table>').prop('class', 'table table-condensed table-striped').append(
									$('<tr>').append(
										$('<th>').prop('width', '50%').append(
											'Protocol'
										)
									).append(
										$('<th>').prop('width', '50%').append(
											'Port Number'
										)
									)
								).append(
									$('<tr>').append(
										$('<td>').prop('width', '50%').append(
											connection.protocol.name
										)
									).append(
										$('<td>').prop('width', '50%').append(
											connection.port_number
										)
									)
								)
							)
						)
					).append(
						$('<hr>')
					);
					$('#connections').append(connectionsTable);
				}
			}
		}

		function createServiceModel(id, name) {
			var result = {
				id: id,
				name: name,
				connections: []
			}
			return result;
		}

		function createServiceModelFromPanel() {
			var editServiceID = $('#edit_service_id').val();
			var editServiceName = $('#edit_service_name').val();
			var result = {
				id: parseInt(editServiceID),
				name: editServiceName,
				connections: createConnectionModelFromPanel(editServiceID)
			}
			return result;
		}

		function createConnectionModelFromPanel(editServiceID) {
			var result = [];
			var rows = editConnectionsTable.fnGetNodes();
			var rowCount = rows.length;
			for (var i = 0; i < rowCount; i = i + 1) {
				var row = rows[i];
				var editConnectionID = $(row).find('input[name=edit_connection_id]').val();
				var editProtocolID = $(row).find('select[name=edit_connection_protocol_id]').val();
				var editConnectionPortNumber = $(row).find('input[name=edit_connection_port_number]').val();
				var editConnectionModel = {
					id: parseInt(editConnectionID),
					protocol_id: parseInt(editProtocolID),
					port_number: parseInt(editConnectionPortNumber),
					service_id: parseInt(editServiceID)
				};
				result.push(editConnectionModel);
			}
			return result;
		}

		function getDeletedConnectionMap() {
			var deletedConnectionMap = {};
			var editingServiceConnections = editingService.connections;
			for (var i = 0; i < editingServiceConnections.length; i = i + 1) {
				var editingServiceConnection = editingServiceConnections[i];
				deletedConnectionMap[editingServiceConnection.id] = editingServiceConnection;
			}
			var rows = editConnectionsTable.fnGetNodes();
			var rowCount = rows.length;
			for (var i = 0; i < rowCount; i = i + 1) {
				var row = rows[i];
				var deletedConnectionId = parseInt($(row).find('input[name=edit_connection_id]').val(), 0);
				delete(deletedConnectionMap[deletedConnectionId]);
			}
			return deletedConnectionMap;
		}

		function createProtocolModelFromPanel() {
			var result = [];
			var rows = editProtocolsTable.fnGetNodes();
			var rowCount = rows.length;
			for (var i = 0; i < rowCount; i = i + 1) {
				var row = rows[i];
				var editProtocolID = $(row).find('input[name=edit_protocol_id]').val();
				var editProtocolName = $(row).find('input[name=edit_protocol_name]').val();
				var editProtocolModel = {
					id: parseInt(editProtocolID),
					name: editProtocolName,
				};
				result.push(editProtocolModel);
			}
			return result;
		}

		function getDeletedProtocolMap() {
			var deletedProtocolMap = {};
			for (var i = 0; i < protocols.length; i = i + 1) {
				var editingProtocol = protocols[i];
				deletedProtocolMap[editingProtocol.id] = editingProtocol;
			}
			var rows = editProtocolsTable.fnGetNodes();
			var rowCount = rows.length;
			for (var i = 0; i < rowCount; i = i + 1) {
				var row = rows[i];
				var deletedProtocolID = parseInt($(row).find('input[name=edit_protocol_id]').val(), 0);
				delete(deletedProtocolMap[deletedProtocolID]);
			}
			return deletedProtocolMap;
		}

		function showProtocols() {
			editProtocolsTable.fnClearTable();
			for (var i = 0; i < protocols.length; i = i + 1) {
				var protocol = protocols[i];
				editProtocolsTable.fnAddData([
					createAlignedCheckboxElement('edit_protocol_check').outerHTML + createHiddenElement('edit_protocol_id', protocol.id).outerHTML,
					createTextElement('edit_protocol_name', 'width:800px', 'name like icmp, tch, udp and gre', protocol.name).outerHTML,
				]);
			}
			editProtocolsTable.fnDraw();
		}

		function onEditRequirementSourceNodeChanged(selector) {
			var editRequirementSourceNodeID = $(selector.currentTarget).val();

			$('#edit_requirement_source_port').children().remove();

			if (editRequirementSourceNodeID == 0) {
				$('#edit_requirement_source_port').append($('<option>').val(0).text('Internet (0.0.0.0/0)'));
			} else {
				var node = nodeMap[editRequirementSourceNodeID];
				var ports = node.ports;
				for (var i = 0; i < ports.length; i = i + 1) {
					var port = portMap[ports[i].id];
					if (port.layer == 3) {
						$('#edit_requirement_source_port').append($('<option>').val(port.id).text(port.name + ' (' + port.ipv4_address.String + '/' + port.ipv4_prefix.Int64 + ')'));
					}
				}
			}
		}

		function onEditRequirementDestinationNodeChanged(selector) {
			var editRequirementDestinationNodeID = $(selector.currentTarget).val();

			$('#edit_requirement_destination_port').children().remove();

			if (editRequirementDestinationNodeID == 0) {
				$('#edit_requirement_destination_port').append($('<option>').val(0).text('Internet (0.0.0.0/0)'));
			} else {
				var node = nodeMap[editRequirementDestinationNodeID];
				var ports = node.ports;
				for (var i = 0; i < ports.length; i = i + 1) {
					var port = portMap[ports[i].id];
					if (port.layer == 3) {
						$('#edit_requirement_destination_port').append($('<option>').val(port.id).text(port.name + ' (' + port.ipv4_address.String + '/' + port.ipv4_prefix.Int64 + ')'));
					}
				}
			}
		}

		function onEditService() {
			if ($('#services').val() == null) {
				alert('Add a service first.');
				return;
			}

			$('#edit_service_panel_right').fadeOut(150, function() {
				// Set edit mode to Update
				editServiceMode = 'Update';
				$('#register_or_update_service_panel_title').children().remove();
				$('#register_or_update_service_panel_title').append($('<span>').text('Service update'));

				// Save the editing service
				editingService = serviceMap[$('#services').val()];

				// Initialize service properties
				$('#edit_service_id').val(editingService.id);
				$('#edit_service_name').val(editingService.name);

				// Initialize connections properties
				var rows = editConnectionsTable.fnGetNodes();
				var rowCount = rows.length;
				for (var i = rowCount - 1; 0 <= i; i = i - 1) {
					editConnectionsTable.fnDeleteRow(i, null, false);
				}

				for (var i = 0; i < editingService.connections.length; i = i + 1) {
					var connection = editingService.connections[i];
					editConnectionsTable.fnAddData([
						createAlignedCheckboxElement('edit_connection_check').outerHTML + createHiddenElement('edit_connection_id', connection.id).outerHTML,
						createSelectElement('edit_connection_protocol_id', 'width:335px', createConnectionProtocolOptionList(), connection.protocol.id).outerHTML,
						createTextElement('edit_connection_port_number', 'width:335px', 'value like 0xdad1c001', connection.port_number).outerHTML,
					]);
				}

				$('#edit_service_panel_right').fadeIn(150, function() {
					editConnectionsTable.fnDraw(true);
				});
			});
		}

		function onNewService() {
			// Set edit mode to Register
			editServiceMode = 'Register';
			$('#register_or_update_service_panel_title').children().remove();
			$('#register_or_update_service_panel_title').append($('<span>').text('Service registration'));

			// Clear the editing service
			editingService = createServiceModel(null, '');

			// Initialize service properties
			$('#edit_service_id').val(0);
			$('#edit_service_name').val('');

			// Initialize connections properties
			var rows = editConnectionsTable.fnGetNodes();
			var rowCount = rows.length;
			for (var i = rowCount - 1; 0 <= i; i = i - 1) {
				editConnectionsTable.fnDeleteRow(i, null, false);
			}

			$('#edit_service_panel_right').fadeIn(150, function() {
				editConnectionsTable.fnDraw(true);
			});
		}

		function onAddConnection() {
			editConnectionsTable.fnAddData([
				createAlignedCheckboxElement('edit_connection_check').outerHTML + createHiddenElement('edit_connection_id', 0).outerHTML,
				createSelectElement('edit_connection_protocol_id', 'width:335px', createConnectionProtocolOptionList(), 0).outerHTML,
				createTextElement('edit_connection_port_number', 'width:335px', 'name like 80', '').outerHTML,
			]);
			editConnectionsTable.fnDraw(true);
		}

		function onDeleteConnection() {
			var rows = editConnectionsTable.fnGetNodes();
			var rowCount = rows.length;

			var selectedRowCount = 0;
			for (var i = 0; i < rowCount; i = i + 1) {
				var row = rows[i];
				if ($(row).find('input[name=edit_connection_check]').prop('checked')) {
					selectedRowCount = selectedRowCount + 1;
				}
			}

			if (selectedRowCount == 0) {
				alert('Check the connections what you want to delete first');
				return;
			}

			if (!confirm('Are you sure to delete selected connections?')) {
				return;
			}

			for (var i = rowCount - 1; 0 <= i; i = i - 1) {
				var row = rows[i];
				if ($(row).find('input[name=edit_connection_check]').prop('checked')) {
					editConnectionsTable.fnDeleteRow(row, null, false);
				}
			}
			editConnectionsTable.fnDraw();
		}

		function onRegisterOrUpdateService() {
			if (editServiceMode == 'Register') {
				if (!confirm('Are you sure to register?')) {
					return;
				}
			} else {
				if (!confirm('Are you sure to update?')) {
					return;
				}
			}

			var connectionMapForDeletion = getDeletedConnectionMap();
			var serviceForRegistrationOrUpdate = createServiceModelFromPanel();

			for (key in connectionMapForDeletion){
				var result = deleteResource('connections', key);
				if (!onServiceModified(result, 204, null, true)) {
					return;
				}
			}
			if (editServiceMode == 'Register') {
				var result = postResource('services', serviceForRegistrationOrUpdate);
				onServiceModified(result, 201, 'The service has been registered successfully', false);
			} else {
				var result = putResource('services', serviceForRegistrationOrUpdate.id, serviceForRegistrationOrUpdate);
				onServiceModified(result, 200, 'The service has been updated successfully', false);
			}
		}

		function onDeleteService() {
			if ($('#services').val() == null) {
				alert('Add a service first.');
				return;
			}

			if (!confirm('Are you sure to delete?')) {
				return;
			}

			var serviceID = $('#services').val();

			var result = deleteResource('services', serviceID);
			onServiceModified(result, 204, 'The service was deleted successfully', false);
		}

		function onCancelRegisterOrUpdateService() {
			if (!confirm('Are you sure to cancel?')) {
				return;
			}

			$('html,body').animate({scrollTop:0},'slow');
			$('#edit_service_panel_right').fadeOut(150);
		}

		function onAddProtocol() {
			editProtocolsTable.fnAddData([
				createAlignedCheckboxElement('edit_protocol_check').outerHTML + createHiddenElement('edit_protocol_id', 0).outerHTML,
				createTextElement('edit_protocol_name', 'width:800px', 'name like icmp, tch, udp and gre', '').outerHTML,
			]);
			editProtocolsTable.fnDraw(true);
		}

		function onDeleteProtocol() {
			var rows = editProtocolsTable.fnGetNodes();
			var rowCount = rows.length;

			var selectedRowCount = 0;
			for (var i = 0; i < rowCount; i = i + 1) {
				var row = rows[i];
				if ($(row).find('input[name=edit_protocol_check]').prop('checked')) {
					selectedRowCount = selectedRowCount + 1;
				}
			}

			if (selectedRowCount == 0) {
				alert('Check the protocols what you want to delete first');
				return;
			}

			if (!confirm('Are you sure to delete selected protocols?')) {
				return;
			}

			for (var i = rowCount - 1; 0 <= i; i = i - 1) {
				var row = rows[i];
				if ($(row).find('input[name=edit_protocol_check]').prop('checked')) {
					editProtocolsTable.fnDeleteRow(row, null, false);
				}
			}
			editProtocolsTable.fnDraw();
		}

		function onUpdateProtocol() {
			if (!confirm('Are you sure to update?')) {
				return;
			}

			var protocolMapForDeletion = getDeletedProtocolMap();
			var protocolsForUpdate = createProtocolModelFromPanel();

			for (key in protocolMapForDeletion){
				var result = deleteResource('protocols', key);
				if (!onProtocolModified(result, 204, null, true)) {
					return;
				}
			}

			for (var i = 0; i < protocolsForUpdate.length; i = i + 1) {
				var protocol = protocolsForUpdate[i];
				var result = null;
				if (protocol.id == 0) {
					result = postResource('protocols', protocol);
					onProtocolModified(result, 201, null, true);
				} else {
					result = putResource('protocols', protocol.id, protocol);
					onProtocolModified(result, 200, null, true);
				}
			}
			onProtocolModified({status: 200}, 200, "The protocols have been updated successfully", false);
		}

		function onCancelDeleteProtocol() {
			if (!confirm('Are you sure to cancel?')) {
				return;
			}

			$('html,body').animate({scrollTop:0},'slow');
			showProtocols();
		}

		$('#edit_service_btn').on('click', function() {
			onEditService();
		});

		$('#new_service_btn').on('click', function() {
			onNewService();
		});

		$('#register_or_update_service_btn').on('click', function() {
			onRegisterOrUpdateService();
		});

		$('#delete_service_btn').on('click', function() {
			onDeleteService();
		});

		$('#cancel_register_or_update_service_btn').on('click', function() {
			onCancelRegisterOrUpdateService();
		});

		$('#edit_requirement_source_node').on('change', function(selector) {
			onEditRequirementSourceNodeChanged(selector);
		});

		$('#edit_requirement_destination_node').on('change', function(selector) {
			onEditRequirementDestinationNodeChanged(selector);
		});

		function onServiceChanged() {
			showServices(false);
		}

		function onLoad() {
			$.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
			{
					return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
							return $('input', td).val();
					} );
			}
			$.fn.dataTable.ext.order['dom-select'] = function  ( settings, col )
			{
					return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
							return $('select', td).val();
					} );
			}
			editProtocolsTable = $('#edit_protocols_table').dataTable({
				scrollX: true,
				scrollY: 250,
				searching: false,
				columns: [
					null,
					{ orderDataType: 'dom-text', type: 'string' }
				]
			});
			editConnectionsTable = $('#edit_connections_table').dataTable({
				scrollX: true,
				scrollY: 150,
				searching: false,
				columns: [
					null,
					{ orderDataType: 'dom-select' },
					{ orderDataType: 'dom-text', type: 'string' }
				]
			});
			editRequirementsTable = $('#edit_requirements_table').dataTable({
				scrollX: true,
				scrollY: 360,
				searching: true
			});

			loadResources();
			$('#communication_requirement_panel').fadeIn(150);
			showRequirements();
			showServices(true);
			showProtocols();
		}

		$('#edit_add_requirement_btn').on('click', function() {
			if (!confirm("Are you sure to register?")) {
				return;
			}

			var requirementForRegistration = createRequiermentModelFromPanel();
			var result = postResource('requirements', requirementForRegistration);
			onRequirementModified(result, 201, 'The requirement has been registered successfully', false);
		});

		$('#edit_delete_requirement_btn').on('click', function(selector) {
			var rows = editRequirementsTable.fnGetNodes();
			var rowCount = rows.length;

			var selectedRowCount = 0;
			for (var i = 0; i < rowCount; i = i + 1) {
				var row = rows[i];
				if ($(row).find('input[name=edit_requirement_check]').prop('checked')) {
					selectedRowCount = selectedRowCount + 1;
				}
			}

			if (selectedRowCount == 0) {
				alert('Check the requirements what you want to delete first');
				return;
			}

			if (!confirm('Are you sure to delete selected requirements?')) {
				return;
			}

			for (var i = rowCount - 1; 0 <= i; i = i - 1) {
				var row = rows[i];
				if ($(row).find('input[name=edit_requirement_check]').prop('checked')) {
					var deletedRequirementID = parseInt($(row).find('input[name=edit_requirement_id]').val(), 0);
					var result = deleteResource('requirements', deletedRequirementID);
					if (!onRequirementModified(result, 204, null, true)) {
						return;
					}
				}
			}
			onRequirementModified({status: 204}, 204, "The requirements have been deleted successfully", false);
		});

		$('#services').on('change', function() {
			onServiceChanged();
		});

		$('#edit_add_connection_btn').on('click', function() {
			onAddConnection();
		});

		$('#edit_delete_connection_btn').on('click', function() {
			onDeleteConnection();
		});

		$('#edit_add_protocol_btn').on('click', function() {
			onAddProtocol();
		});

		$('#edit_delete_protocol_btn').on('click', function() {
			onDeleteProtocol();
		});

		$('#register_or_update_protocol_btn').on('click', function() {
			onUpdateProtocol();
		});

		$('#cancel_register_or_update_protocol_btn').on('click', function() {
			onCancelDeleteProtocol();
		});

		onLoad();

	})(jQuery);
</script>
{{template "footerpart" .}}
