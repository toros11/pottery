{{template "headerpart" .}}
<!-- Left Column -->
<div class="col-sm-4">
	<!-- Node Information Panel -->
	<div class="panel panel-default panel-custom" id="nodes_panel">
		<!-- Node Information Panel Title -->
		<div class="panel-heading">
			<h1 class="panel-title"><span class="glyphicon glyphicon-hdd"></span> Nodes</h1>
		</div><!-- /Node Information Panel Title -->
		<!-- Node Information Panel Body -->
		<div class="panel-body">
			<!-- Node Selection -->
			<div class="input-group text-left">
				<select class="form-control" id="nodes">
				</select>
				<span class="input-group-btn">
					<button class="btn btn-default" id="edit_node_btn" type="button"><span class="glyphicon glyphicon-edit"></span></button>
					<button class="btn btn-default" id="new_node_btn" type="button"><span class="glyphicon glyphicon-plus"></span></button>
					<button class="btn btn-default" id="delete_node_btn" type="button"><span class="glyphicon glyphicon-minus"></span></button>
				</span>
			</div><!-- /Node Selection -->
			<br>
			<!-- Node Properties -->
			<table class="table">
				<tr>
					<th width="50%"><span class="glyphicon glyphicon-file"></span> Property</th>
					<th width="50%"><span class="glyphicon glyphicon-pencil"></span> Value</th>
				</tr>
				<tr>
					<td>Node Name</td>
					<td><span id="node_name"></span></td>
				</tr>
				<tr>
					<td>Physical/Virtual</td>
					<td><span id="node_pv"></span></td>
				</tr>
				<tr>
					<td>Node Type</td>
					<td><span id="node_type"></span></td>
				</tr>
			</table><!-- /Node Properties -->
			<!-- Port-Destination Panel -->
			<div class="panel panel-default">
				<div class="panel-heading">
					<h1 class="panel-title"><span class="glyphicon glyphicon-list-alt"></span> Port - Destination</h1>
				</div>
				<div class="panel-body">
					<div class="pre-scrollable" id="ports">
					</div>
				</div>
			</div><!-- /Port-Destination Panel -->
		</div><!-- /Node Information Panel Body -->
	</div><!-- /Node Information Panel -->
</div><!--/Left Column-->

<!-- Right Column -->
<div class="col-sm-8">
	<!-- Node Edit Panel -->
	<div class="panel panel-default panel-custom" id="edit_panel">
	</div><!-- /Edit-Node Panel -->
</div><!--/Right Column-->

<script language="javascript">
	(function($) {

		const API_PREFIX = '/v1';

		var nodes = null;
		var nodePvs = null;
		var nodeTypes = null;

		const editNodeTemplate = `{{template "network_edit_node" .}}`;
		const editPortTemplate = `{{template "network_edit_port" .}}`;

		const editNodeTemplateParametersForAdd = {
			"title": "Node registration",
			"submit_button_id": "submit_add_node_btn",
			"cancel_button_id": "cancel_add_node_btn",
		}

		const editNodeTemplateParametersForUpdate = {
			"title": "Node update",
			"submit_button_id": "submit_update_node_btn",
			"cancel_button_id": "cancel_update_node_btn",
		}

		function buildTemplate(template, templateParameters) {
			result = template;
			for (key in templateParameters) {
				template = template.replace(new RegExp("{@" + key + "}", 'g'), templateParameters[key]);
			}
			return template;
		}

		var prebuiltEditNodeTemplateForAdd = buildTemplate(editNodeTemplate, editNodeTemplateParametersForAdd);
		var prebuiltEditNodeTemplateForUpdate = buildTemplate(editNodeTemplate, editNodeTemplateParametersForUpdate);

		function loadNodes() {
			nodes = $.parseJSON($.ajax({
				type: 'GET',
				url: API_PREFIX + '/nodes?preloads=NodePv,NodeType,Ports,NodeGroups',
				dataType: 'json',
				contentType: 'application/json',
				async: false
			}).responseText);
		}

		function loadNodePvs() {
			nodePvs = $.parseJSON($.ajax({
				type: 'GET',
				url: API_PREFIX + '/node_pvs',
				dataType: 'json',
				contentType: 'application/json',
				async: false
			}).responseText);
		}

		function loadNodeTypes() {
			nodeTypes = $.parseJSON($.ajax({
				type: 'GET',
				url: API_PREFIX + '/node_types',
				dataType: 'json',
				contentType: 'application/json',
				async: false
			}).responseText);
		}

		function postNode(nodeObject) {
			return $.ajax({
				type: 'POST',
				url: API_PREFIX + '/nodes',
				dataType: 'json',
				contentType: 'application/json',
				data: JSON.stringify(nodeObject),
				async: false
			});
		}

		function putNode(nodeId, nodeObject) {
			return $.ajax({
				type: 'PUT',
				url: API_PREFIX + '/nodes/' + nodeId,
				dataType: 'json',
				contentType: 'application/json',
				data: JSON.stringify(nodeObject),
				async: false
			});
		}

		function deleteNode(nodeId) {
			return $.ajax({
				type: 'DELETE',
				url: API_PREFIX + '/nodes/' + nodeId,
				dataType: 'json',
				contentType: 'application/json',
				async: false
			});
		}

		function deletePort(portId) {
			return $.ajax({
				type: 'DELETE',
				url: API_PREFIX + '/ports/' + portId,
				dataType: 'json',
				contentType: 'application/json',
				async: false
			});
		}

		function findNode(nodeId) {
			for (var i = 0; i < nodes.length; i = i + 1) {
				if (nodes[i].id == nodeId) {
					return nodes[i]
				}
			}
			return null
		}

		function findPort(portId) {
			for (var i = 0; i < nodes.length; i = i + 1) {
				node = nodes[i]
				for (var j = 0; j < node.ports.length; j = j + 1) {
					if (node.ports[j].id == portId) {
						return node.ports[j]
					}
				}
			}
			return null
		}

		function getMaxPortSequence() {
			return $("select[name^=edit_port_destination_port]").length
		}

		function getEditElementArray(base_element, name) {
			var item_map = $('#' + base_element + ' [name=' + name + ']');
			var items = item_map.map(function(index, element) {
				return $(this).val();
			});
			return items;
		}

		function convertSqlNullObject(nullValue, typeString, value) {
			result = {};
			if (typeString == "Int64") {
				result[typeString] = parseInt(value)
			} else {
				result[typeString] = value;
			}
			if (nullValue == value) {
				result["Valid"] = false;
			}
			else {
				result["Valid"] = true;
			}
			return result;
		}

		function getEditNodeObject() {
			var result = {}
			var editNodeId = $('#edit_node_id').val();
			var editNodeName = $('#edit_node_name').val();
			var editNodePvId = $('#edit_node_pv').val();
			var editNodeTypeId = $('#edit_node_type').val();
			result = {
				id: parseInt(editNodeId),
				name: editNodeName,
				node_pv_id: parseInt(editNodePvId),
				node_type_id: parseInt(editNodeTypeId),
				ports: getEditPortObjects()
			}
			return result;
		}

		function getEditPortObjects() {
			var result = []
			var editNodeId = $('#edit_node_id').val();
			var editPortIds = getEditElementArray('edit_panel', 'edit_port_id');
			var editPortNumbers = getEditElementArray('edit_panel', 'edit_port_number');
			var editPortNames = getEditElementArray('edit_panel', 'edit_port_name');
			var editPortLayers = getEditElementArray('edit_panel', 'edit_port_layer');
			var editPortDestinationPortIds = getEditElementArray('edit_panel', 'edit_port_destination_port');
			var editPortMacAddresses = getEditElementArray('edit_panel', 'edit_port_mac_address');
			var editPortIpv4Addresses = getEditElementArray('edit_panel', 'edit_port_ipv4_address');
			var editPortIpv4Prefixes = getEditElementArray('edit_panel', 'edit_port_ipv4_prefix');
			var editPortRemarks = getEditElementArray('edit_panel', 'edit_port_remark');
			for (var i = 0; i < editPortDestinationPortIds.length; i = i + 1) {
				result[i] = {
					id: parseInt(editPortIds[i]),
					number: parseInt(editPortNumbers[i]),
					node_id: parseInt(editNodeId),
					name: editPortNames[i],
					layer: parseInt(editPortLayers[i]),
					destination_port_id: convertSqlNullObject(0, "Int64", editPortDestinationPortIds[i]),
					destination_port: null,
					mac_address: convertSqlNullObject("", "String", editPortMacAddresses[i]),
					ipv4_address: convertSqlNullObject("", "String", editPortIpv4Addresses[i]),
					ipv4_prefix: convertSqlNullObject(0, "Int64", editPortIpv4Prefixes[i]),
					remark: convertSqlNullObject("", "String", editPortRemarks[i]),
				}
			}
			return result;
		}

		function getDeletedPortIds() {
			var result = getEditElementArray('edit_panel', 'edit_port_deleted_port_id');
			return result;
		}

		function showNode(initializeNodeSelection) {
			if (initializeNodeSelection) {
				$("#nodes").children().remove();
				for (var i = 0; i < nodes.length; i = i + 1) {
					$("#nodes").append($('<option>').val(nodes[i].id).text(nodes[i].name));
				}
			}
			$("#node_name").text('');
			$("#node_pv").text('');
			$("#node_type").text('');
			$("#ports").text('');

			var node = findNode($("#nodes").val())
			if (node != null) {
				$("#node_name").append("&nbsp;&nbsp;&nbsp;" + node.name)
				$("#node_pv").append("&nbsp;&nbsp;&nbsp;" + node.node_pv.name)
				$("#node_type").append("&nbsp;&nbsp;&nbsp;" + node.node_type.name)
				for (var i = 0; i < node.ports.length; i = i + 1) {
					port = node.ports[i]
					if (port.destination_port_id.Valid) {
						destination_port = findPort(port.destination_port_id.Int64)
						destination_port_node = findNode(destination_port.node_id)
						$("#ports").append('<div><table class="table table-bordered"><tr><td><table class="table table-condensed table-striped">' +
							"<tr><th width=10%>#</th><th width=30%>Name</th><th width=30%>Node</th><th width=30%>Port</th></tr>" +
							"<tr><td>" + port.number + "</td><td>" + port.name + "</td><td>" + destination_port_node.name + "</td><td>" + destination_port.name + "</td></tr>" +
							"<tr><th colspan=4>Mac Address</th></tr>" +
							"<tr><td colspan=4>" + port.mac_address.String + "&nbsp;</td></tr>" +
							"<tr><th colspan=4>IP Address</th></tr>" +
							"<tr><td colspan=4>" + port.ipv4_address.String + "/" + port.ipv4_prefix.Int64 + "&nbsp;</td></tr>" +
							"</table></td></tr></table><hr></div>");
					}
					else {
						$("#ports").append('<div><table class="table table-bordered"><tr><td><table class="table table-condensed table-striped">' +
							"<tr><th width=10%>#</th><th width=30%>Name</th><th width=30%>Node</th><th width=30%>Port</th></tr>" +
							"<tr><td>" + port.number + "</td><td>" + port.name + "</td><td>None</td><td>Unplugged</td></tr>" +
							"<tr><th colspan=4>Mac Address</th></tr>" +
							"<tr><td colspan=4>" + port.mac_address.String + "&nbsp;</td></tr>" +
							"<tr><th colspan=4>IP Address</th></tr>" +
							"<tr><td colspan=4>" + port.ipv4_address.String + "/" + port.ipv4_prefix.Int64 + "&nbsp;</td></tr>" +
							"</table></td></tr></table><hr></div>");
					}
				}
			}
		}

		function onNodeChanged() {
			showNode(false);
		}

		function onLoad() {
			loadNodePvs();
			loadNodeTypes();
			loadNodes();
			$('#nodes_panel').fadeIn(150);
			showNode(true);
		}

		function onEditNode() {
			$('#edit_panel').fadeOut(150, function() {
			   $('#edit_panel').children().remove();
				 $('#edit_panel').html(prebuiltEditNodeTemplateForUpdate);
				 for (var i = 0; i < nodePvs.length; i = i + 1) {
	 				$("#edit_node_pv").append($('<option>').val(nodePvs[i].id).text(nodePvs[i].name));
	 			}

	 			for (var i = 0; i < nodeTypes.length; i = i + 1) {
	 				$("#edit_node_type").append($('<option>').val(nodeTypes[i].id).text(nodeTypes[i].name));
	 			}

	 			node_id = $("#nodes").val();
	 			node = findNode(node_id);
	 			$("#edit_node_id").val(node.id);
	 			$("#edit_node_name").val(node.name);
	 			$("#edit_node_pv").val(node.node_pv.id);
	 			$("#edit_node_type").val(node.node_type.id);

	 			for (var i = 0; i < node.ports.length; i = i + 1) {
	 				port = node.ports[i];
	 				editPortTemplateParameters = {
	 					"port_sequence": i
	 				};
	 				$("#edit_port").append(buildTemplate(editPortTemplate, editPortTemplateParameters));
	 				$("#edit_port_id_" + i).val(port.id);
	 				$("#edit_port_number_" + i).val(port.number);
	 				$("#edit_port_name_" + i).val(port.name);
	 				$("#edit_port_mac_address_" + i).val(port.mac_address.String);
	 				$("#edit_port_ipv4_address_" + i).val(port.ipv4_address.String);
	 				$("#edit_port_ipv4_prefix_" + i).val(port.ipv4_prefix.Int64);
	 				$("#edit_port_remark_" + i).val(port.remark.String);

	         for (var j = 1; j <= 3; j = j + 1) {
	             $("#edit_port_layer_" + i).append($('<option>').val(j).text('Layer ' + j));
	         }
	         $("#edit_port_layer_" + i).val(port.layer)

	 				$("#edit_port_destination_port_" + i).append($('<option>').val(0).text('Unplugged'));
	 				for (var j = 0; j < nodes.length; j = j + 1) {
	 					for (var k = 0; k < nodes[j].ports.length; k = k + 1) {
	 						$("#edit_port_destination_port_" + i).append($('<option>').val(nodes[j].ports[k].id).text(nodes[j].name + ' - ' + nodes[j].ports[k].name));
	 					}
	 				}

	 				if (port.destination_port_id.Valid) {
	 					$("#edit_port_destination_port_" + i).val(port.destination_port_id.Int64)
	 				}
	 			}
				$('#edit_panel').fadeIn(150);
			});
		}

		function onNewNode() {
			$('#edit_panel').fadeOut(150, function() {
			   $('#edit_panel').children().remove();
				 $('#edit_panel').html(prebuiltEditNodeTemplateForAdd);
				 for (var i = 0; i < nodePvs.length; i = i + 1) {
					 $("#edit_node_pv").append($('<option>').val(nodePvs[i].id).text(nodePvs[i].name));
				 }
				 for (var i = 0; i < nodeTypes.length; i = i + 1) {
					 $("#edit_node_type").append($('<option>').val(nodeTypes[i].id).text(nodeTypes[i].name));
				 }
				 $('#edit_panel').fadeIn(150);
			});
		}

		function onAddPort() {
			$("#edit_port").animate({scrollTop: $('#edit_port')[0].scrollHeight},'slow');

			newPortNumber = getMaxPortSequence() + 1;

			editPortTemplateParameters = {
				"port_sequence": newPortNumber
			};
			$("#edit_port").append(buildTemplate(editPortTemplate, editPortTemplateParameters));

      for (var i = 1; i <= 3; i = i + 1) {
          $("#edit_port_layer_" + newPortNumber).append($('<option>').val(i).text('Layer ' + i));
      }

			$("#edit_port_destination_port_" + newPortNumber).append($('<option>').val(0).text('Unplugged'));
			for (var i = 0; i < nodes.length; i = i + 1) {
				for (var j = 0; j < nodes[i].ports.length; j = j + 1) {
					$("#edit_port_destination_port_" + newPortNumber).append($('<option>').val(nodes[i].ports[j].id).text(nodes[i].name + ' - ' + nodes[i].ports[j].name));
				}
			}

		}

		function onDeletePort() {
			var deletedPortId = $("#edit_port").children().last().find('input[name=edit_port_id]').val();
			if (deletedPortId != 0) {
				$('#edit_panel').append('<input type="hidden" name="edit_port_deleted_port_id" value="' + deletedPortId + '">')
			}
			$("#edit_port").children().last().remove();

		}

		$('#nodes').on('change', function() {
			onNodeChanged();
		});

		$('#edit_node_btn').on('click', function() {
			onEditNode();
		});

		$('#new_node_btn').on('click', function() {
			onNewNode();
		});

		$('#edit_panel').on('click', '#edit_add_port_btn', function() {
			onAddPort();
		});

		$('#edit_panel').on('click', '#edit_delete_port_btn', function() {
			onDeletePort();
		});

		$('#edit_panel').on('click', '#submit_update_node_btn', function() {
			if (!confirm("Are you sure to update?")) {
				return;
			}

			var editNodeId = $('#edit_node_id').val();

			response = putNode(editNodeId, getEditNodeObject());

			if (response.status == 200) {
				var deletedPortIds = getDeletedPortIds();
				for (var i = 0; i < deletedPortIds.length; i = i + 1) {
					response = deletePort(deletedPortIds[i]);
					if (response.status != 204) {
						$("html,body").animate({scrollTop:0},'slow');
						$("#error_message").text($.parseJSON(response.responseText).error)
						$('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
						return
					}
				}

				$("#information_message").text("The node has been updates successfuly.")
				$("html,body").animate({scrollTop:0},'slow');
				$('#alert_info').fadeIn(500).delay(2000).fadeOut(1000);
				$('#edit_panel').fadeOut(150);
				onLoad();
			} else {
				$("html,body").animate({scrollTop:0},'slow');
				$("#error_message").text($.parseJSON(response.responseText).error)
				$('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
			}
		});

		$('#edit_panel').on('click', '#submit_add_node_btn', function() {
			if (!confirm("Are you sure to register?")) {
				return;
			}

			response = postNode(getEditNodeObject());

			if (response.status == 201) {
				$("html,body").animate({scrollTop:0},'slow');
				$("#information_message").text("The node has been registered successfully.")
				$('#alert_info').fadeIn(500).delay(2000).fadeOut(1000);
				$('#edit_panel').fadeOut(150);
				onLoad();
			} else {
				$("html,body").animate({scrollTop:0},'slow');
				$("#error_message").text($.parseJSON(response.responseText).error)
				$('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
			}
		});

		$('#delete_node_btn').on('click', function() {
			if (!confirm("Are you sure to delete?")) {
				return;
			}

			var nodeId = $('#nodes').val();

			response = deleteNode(nodeId);

			if (response.status == 204) {
				$("html,body").animate({scrollTop:0},'slow');
				$("#information_message").text("The node was deleted successfully.")
				$('#alert_info').fadeIn(500).delay(2000).fadeOut(1000);
				$('#edit_panel').fadeOut(250)
				onLoad();
			} else {
				$("html,body").animate({scrollTop:0},'slow');
				$("#error_message").text($.parseJSON(response.responseText).error)
				$('#alert_error').fadeIn(500).delay(2000).fadeOut(1000);
			}
		});

		$('#edit_panel').on('click', '#cancel_add_node_btn', function() {
			if (!confirm("Are you sure to cancel?")) {
				return;
			}
			$("html,body").animate({scrollTop:0},'slow');
			$('#edit_panel').fadeOut(150);
		});

		$('#edit_panel').on('click', '#cancel_update_node_btn', function() {
			if (!confirm("Are you sure to cancel?")) {
				return;
			}
			$("html,body").animate({scrollTop:0},'slow');
			$('#edit_panel').fadeOut(150);
		});

		onLoad();

	})(jQuery);
</script>
{{template "footerpart" .}}
